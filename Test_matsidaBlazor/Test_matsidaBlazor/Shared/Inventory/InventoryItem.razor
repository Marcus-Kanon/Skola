@using Test_matsidaBlazor.Data.Models
@using Test_matsidaBlazor.Data
@using Blazored.LocalStorage
@using Test_matsidaBlazor.Shared.IngredientSelector

<li class="list-group-item list-group-item">
    <div class="d-sm-flex align-items-center justify-content-between">
        <IngredientSelector CurrentIngredient="@Ingredient" OnItemSelect="@OnItemSelected" Visible="@InputVisible"/>
        <div>
            <span style="@StyleItemName">@Ingredient.Name</span>
        </div>

        <div>
            <button style="@StyleItemName" @onclick="OnEditItem" type="button" class="btn btn-warning btn-sm">Redigera</button>
            <button style="@StyleBtnSave" @onclick="SaveItem" type="button" class="btn btn-success btn-sm">Spara</button>
            <button @onclick="() => RemoveItem(new ItemEventArgs() { Ingredient = Ingredient, Id = ListId })" type="button" class="btn btn-close" aria-label="Close"></button>
        </div>
    </div>
</li>

@code {
    [Parameter]
    public Ingredient Ingredient { get; set; } = new Ingredient();
    [Parameter]
    public int ListId { get; set; } = new();
    [Parameter]
    public EventCallback<ItemEventArgs> OnItemRemove { get; set; }
    [Parameter]
    public EventCallback<ItemEventArgs> OnItemUpdate { get; set; }
    private bool InputVisible = false;
    public string? Name { get; set; } = "";
    public string StyleItemName { get; set; } = "";
    public string StyleInput { get; set; } = "display:none; width:50%";
    public string StyleBtnSave { get; set; } = "display:none";

    public void OnItemSelected(Ingredient ingredient)
    {
        Ingredient = ingredient;

        SaveItem();
    }

    public void OnEditItem()
    {
        StyleItemName = "display:none";
        StyleInput = "display:inline; width:50%";
        StyleBtnSave = "display:inline";
        InputVisible = true;

        StateHasChanged();
    }

    public void OnNameChange(ChangeEventArgs e)
    {
        string? value = "";

        if(e.Value != null)
            value = e.Value.ToString();

        Name = value;
    }

    public void RemoveItem(ItemEventArgs item)
    {
        OnItemRemove.InvokeAsync(item);
    }

    public void SaveItem()
    {
        StyleItemName = "display:inline";
        StyleInput = "display:none; width:50%";
        StyleBtnSave = "display:none";
        InputVisible = false;

        OnItemUpdate.InvokeAsync(new ItemEventArgs() { Id = ListId, Ingredient=Ingredient });

        StateHasChanged();
    }
}
