@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using Test_matsidaBlazor.Data
@using Test_matsidaBlazor.Data.Models
@using Blazored.LocalStorage
@inject Blazored.LocalStorage.ILocalStorageService _LocalStorage
@inject NavigationManager NavigationManager

<div class="container">
    <h3>Ditt skafferi</h3>
    <span>@Message</span>
    <div class="d-sm-flex align-items-center justify-content-between w-25">
        <div></div>
        <div>
            <button @onclick=OnAddItem type="button" class="btn" data-toggle="modal" data-target="#exampleModalCenter">
                <span class="fa fa-plus fa-lg" aria-hidden="true"> Lägg till </span>
            </button>
        </div>
    </div>
<ul class="list-group w-25">
    @if(Items != null)
    {
        for(int i = 0; i < Items.Count(); i++)
        {
            <InventoryItem ListId=i UpdateItem=@((args) => UpdateItem(args.Id, args.Ingredient)) RemoveItem=RemoveItem Ingredient=@Items[i] />
            Console.WriteLine(Items[i].Name);

        }
    }

</ul>
</div>


@code {
    [Parameter]
    public int InventoryPage { get; set; } = 0;
    public LoginTracker? Tracker { get; set; }
    public bool LoggedIn { get; set; } = false;
    public string Message { get; set; } = "";
    //public List<Ingredient> Items = new List<Ingredient>();

    public int InventoryId { get; set; } = 0;

    CrudStuff crud = CrudStuff.GetInstance();


    protected override async Task OnInitializedAsync()
    {
        Tracker = await _LocalStorage.GetItemAsync<LoginTracker>("LoginTracker");


        if(Tracker != null)
        {
            LoadInventory();
            ItemsInitialized = true;
        }
        else
        {
            NavigationManager.NavigateTo("/Login", true);
        }

        base.OnInitialized();
    }

    public void RemoveItem(Ingredient ingredient)
    {
        crud.RemoveInventoryItem(Tracker, ingredient, 0);
        LoadInventory();
    }



    public void OnAddItem()
    {
        Items.Add(new Ingredient() { Name = "Ny vara" });
    }

    public void UpdateItem(int id, Ingredient ingredient)
    {
        Items.RemoveAt(id);
        Items.Insert(id, ingredient);
    }

    protected override void OnParametersSet()
    {

        base.OnParametersSet();
    }


    public void LoadInventory()
    {
        if(crud.CheckValidTracker(Tracker))
        {
            Message = "Hej " + Tracker.Username + "!";

            Items.Clear();
            crud.GetIngredientsInInventory(Tracker, InventoryId).ForEach(Items.Add);
        }
        else
        {
            Items = new ObservableCollection<Ingredient>();
            Message = "Not logged in";
        }
    }

    public void ClearSession()
    {
        _LocalStorage.ClearAsync();
        Tracker = null;
        LoadInventory();

        StateHasChanged();
    }
}
